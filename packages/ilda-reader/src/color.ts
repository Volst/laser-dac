import { BlankingBit } from './file';

export function parseColor(st: any) {
  const colorIndex = (st >> 0) & 0x7f;
  const blanking = st & BlankingBit;
  const rgb = defaultColors[colorIndex % defaultColors.length];
  if (blanking || !rgb) {
    return { r: 0, g: 0, b: 0 };
  }
  return rgb;
}

// This is the official suggested default color palette (64 colors), as found in https://www.ilda.com/resources/StandardsDocs/ILDA_IDTF14_rev011.pdf
// There is also software out there that uses a palette of 255 colors, however this is not standardized.
export const defaultColors = [
  { r: 1, g: 0, b: 0 },
  { r: 1, g: 0.06666666666666667, b: 0 },
  { r: 1, g: 0.13333333333333333, b: 0 },
  { r: 1, g: 0.2, b: 0 },
  { r: 1, g: 0.26666666666666666, b: 0 },
  { r: 1, g: 0.3333333333333333, b: 0 },
  { r: 1, g: 0.4, b: 0 },
  { r: 1, g: 0.4666666666666667, b: 0 },
  { r: 1, g: 0.5333333333333333, b: 0 },
  { r: 1, g: 0.6, b: 0 },
  { r: 1, g: 0.6666666666666666, b: 0 },
  { r: 1, g: 0.7333333333333333, b: 0 },
  { r: 1, g: 0.8, b: 0 },
  { r: 1, g: 0.8666666666666667, b: 0 },
  { r: 1, g: 0.9333333333333333, b: 0 },
  { r: 1, g: 1, b: 0 },
  { r: 1, g: 1, b: 0 },
  { r: 0.9333333333333333, g: 1, b: 0 },
  { r: 0.8, g: 1, b: 0 },
  { r: 0.6666666666666666, g: 1, b: 0 },
  { r: 0.5333333333333333, g: 1, b: 0 },
  { r: 0.4, g: 1, b: 0 },
  { r: 0.26666666666666666, g: 1, b: 0 },
  { r: 0.13333333333333333, g: 1, b: 0 },
  { r: 0, g: 1, b: 0 },
  { r: 0, g: 1, b: 0.13333333333333333 },
  { r: 0, g: 1, b: 0.26666666666666666 },
  { r: 0, g: 1, b: 0.4 },
  { r: 0, g: 1, b: 0.5333333333333333 },
  { r: 0, g: 1, b: 0.6666666666666666 },
  { r: 0, g: 1, b: 0.8 },
  { r: 0, g: 1, b: 0.9333333333333333 },
  { r: 0, g: 0.5333333333333333, b: 1 },
  { r: 0, g: 0.4666666666666667, b: 1 },
  { r: 0, g: 0.4, b: 1 },
  { r: 0, g: 0.4, b: 1 },
  { r: 0, g: 0.3333333333333333, b: 1 },
  { r: 0, g: 0.26666666666666666, b: 1 },
  { r: 0, g: 0.26666666666666666, b: 1 },
  { r: 0, g: 0.13333333333333333, b: 1 },
  { r: 0, g: 0, b: 1 },
  { r: 0.13333333333333333, g: 0, b: 1 },
  { r: 0.26666666666666666, g: 0, b: 1 },
  { r: 0.4, g: 0, b: 1 },
  { r: 0.5333333333333333, g: 0, b: 1 },
  { r: 0.6666666666666666, g: 0, b: 1 },
  { r: 0.8, g: 0, b: 1 },
  { r: 0.9333333333333333, g: 0, b: 1 },
  { r: 1, g: 0, b: 1 },
  { r: 1, g: 0.13333333333333333, b: 1 },
  { r: 1, g: 0.26666666666666666, b: 1 },
  { r: 1, g: 0.4, b: 1 },
  { r: 1, g: 0.5333333333333333, b: 1 },
  { r: 1, g: 0.6666666666666666, b: 1 },
  { r: 1, g: 0.8, b: 1 },
  { r: 1, g: 0.9333333333333333, b: 1 },
  { r: 1, g: 1, b: 1 },
  { r: 1, g: 0.9333333333333333, b: 0.9333333333333333 },
  { r: 1, g: 0.8, b: 0.8 },
  { r: 1, g: 0.6666666666666666, b: 0.6666666666666666 },
  { r: 1, g: 0.5333333333333333, b: 0.5333333333333333 },
  { r: 1, g: 0.4, b: 0.4 },
  { r: 1, g: 0.26666666666666666, b: 0.26666666666666666 },
  { r: 0, g: 0.13333333333333333, b: 0.13333333333333333 },
];
